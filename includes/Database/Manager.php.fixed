<?php
/**
 * Database Manager class for HeritagePress plugin
 *
 * @package HeritagePress
 */

namespace HeritagePress\Database;

/**
 * Database Manager class
 */
class Manager
{
    /** @var string Schema directory path */
    private $schema_dir;

    /** @var string Plugin version */
    private $version;

    /** @var string Plugin directory */
    private $plugin_dir;

    /** @var \wpdb WordPress database object */
    private $wpdb;

    /**
     * Constructor
     * 
     * @param string $plugin_dir Optional plugin directory path
     * @param string $version Optional plugin version
     */
    public function __construct($plugin_dir = null, $version = '1.0.0')
    {
        global $wpdb;
        $this->wpdb = $wpdb;

        // Ensure plugin directory path ends with a slash
        $this->plugin_dir = rtrim($plugin_dir ?: dirname(dirname(dirname(__FILE__))), '/') . '/';
        $this->version = $version;
        $this->schema_dir = $this->plugin_dir . 'includes/Database/schema/';
    }

    /**
     * Install database tables (called during plugin activation)
     */
    public function install()
    {
        // Create the database tables
        $this->init_tables();
        
        // Store the version
        WPHelper::updateOption('heritagepress_db_version', $this->version);
        
        // Create a default tree
        $this->create_default_tree();
    }
    
    /**
     * Create default tree
     */
    private function create_default_tree()
    {
        $default_tree = [
            'title' => 'My Family Tree',
            'description' => 'Default family tree created during installation',
            'privacy_level' => 0,
            'owner_user_id' => get_current_user_id(),
            'created_at' => current_time('mysql'),
            'updated_at' => current_time('mysql')
        ];
        
        // Check if default tree already exists
        $existing = $this->wpdb->get_var("SELECT COUNT(*) FROM {$this->wpdb->prefix}hp_trees WHERE title = 'My Family Tree'");
        if (!$existing) {
            $this->wpdb->insert($this->wpdb->prefix . 'hp_trees', $default_tree);
        }
    }
    
    /**
     * Initialize database tables
     */
    public function init_tables()
    {
        $charset_collate = $this->wpdb->get_charset_collate();

        // Get the SQL files
        $sql_files = [
            'core-tables.sql',
            'documentation-tables.sql',
            'gedcom7-tables.sql',
            'compliance-tables.sql',
        ];

        foreach ($sql_files as $sql_file) {
            $sql = file_get_contents($this->schema_dir . $sql_file);
            if ($sql === false) {
                error_log('HeritagePress: Failed to read SQL file: ' . $sql_file);
                continue;
            }

            // Replace prefix placeholder with actual prefix
            $sql = str_replace('{$prefix}', $this->wpdb->prefix, $sql);

            // Add charset and collate
            $sql = str_replace('ENGINE=InnoDB', 'ENGINE=InnoDB ' . $charset_collate, $sql);

            // Run the SQL
            WPHelper::dbDelta($sql);
        }

        // Initialize default calendar systems
        $calendar_system = new \HeritagePress\Models\CalendarSystem();
        $calendar_system->initDefaults();        // Store the schema version
        WPHelper::updateOption('heritagepress_db_version', $this->version);
    }

    /**
     * Check if database tables need to be updated
     *
     * @return bool True if update is needed
     */
    public function needs_update()
    {
        $current_version = WPHelper::getOption('heritagepress_db_version', '0');
        return version_compare($current_version, $this->version, '<');
    }

    /**
     * Get list of required tables
     *
     * @return array List of table names without prefix
     */
    public function get_required_tables()
    {
        return [
            'hp_individuals',
            'hp_names',
            'hp_families',
            'hp_family_links',
            'hp_events',
            'hp_event_links',
            'hp_places',
            'hp_event_types',
            'hp_trees',
            'hp_repositories',
            'hp_sources',
            'hp_citations',
            'hp_citation_links',
            'hp_notes',
            'hp_note_links',
            'hp_media_objects',
            'hp_media_links',
            'hp_aliases',
            'hp_ages',
            'hp_relationships',
            // New GEDCOM 7 tables
            'hp_gedzip_archives',
            'hp_gedzip_files',
            'hp_calendar_systems',
            'hp_calendar_dates',
            'hp_extended_characters',
            'hp_extended_character_mappings',
            'hp_event_roles',
            'hp_family_groups',
            'hp_family_group_members',
            'hp_dna_tests',
            'hp_dna_matches',
            'hp_dna_segments',
        ];
    }

    /**
     * Create individual
     * 
     * @param array $data Individual data
     * @return int|false ID of created individual or false on failure
     */
    public function create_individual($data)
    {
        $result = $this->wpdb->insert($this->wpdb->prefix . 'hp_individuals', $data);
        return $result ? $this->wpdb->insert_id : false;
    }

    /**
     * Create name
     * 
     * @param array $data Name data
     * @return int|false ID of created name or false on failure
     */
    public function create_name($data)
    {
        $result = $this->wpdb->insert($this->wpdb->prefix . 'hp_names', $data);
        return $result ? $this->wpdb->insert_id : false;
    }

    /**
     * Update individual
     * 
     * @param int $id Individual ID
     * @param array $data Individual data
     * @return bool Success or failure
     */
    public function update_individual($id, $data)
    {
        return $this->wpdb->update(
            $this->wpdb->prefix . 'hp_individuals',
            $data,
            ['id' => $id]
        );
    }

    /**
     * Merge individuals
     * 
     * @param int $source_id Source individual ID
     * @param int $target_id Target individual ID
     * @return bool Success or failure
     */
    public function merge_individuals($source_id, $target_id)
    {
        global $wpdb;

        // Start transaction
        $wpdb->query('START TRANSACTION');

        try {
            // Update all relations from source to target
            $tables = [
                'hp_names' => 'individual_id',
                'hp_events' => 'individual_id',
                'hp_family_links' => 'individual_id',
                'hp_citations' => 'individual_id'
            ];

            foreach ($tables as $table => $column) {
                $wpdb->update(
                    $wpdb->prefix . $table,
                    [$column => $target_id],
                    [$column => $source_id]
                );
            }

            // Delete the source individual
            $wpdb->delete(
                $wpdb->prefix . 'hp_individuals',
                ['id' => $source_id]
            );

            $wpdb->query('COMMIT');
            return true;

        } catch (\Exception $e) {
            $wpdb->query('ROLLBACK');
            return false;
        }
    }

    /**
     * Create tree
     * 
     * @param array $data Tree data
     * @return int|false ID of created tree or false on failure
     */
    public function create_tree($data)
    {
        global $wpdb;
        $result = $wpdb->insert($wpdb->prefix . 'hp_trees', $data);
        return $result ? $wpdb->insert_id : false;
    }

    /**
     * Update tree
     * 
     * @param int $id Tree ID
     * @param array $data Tree data
     * @return bool Success or failure
     */
    public function update_tree($id, $data)
    {
        global $wpdb;
        return $wpdb->update(
            $wpdb->prefix . 'hp_trees',
            $data,
            ['id' => $id]
        );
    }

    /**
     * Delete tree
     * 
     * @param int $id Tree ID
     * @return bool Success or failure
     */
    public function delete_tree($id)
    {
        global $wpdb;

        // Start transaction
        $wpdb->query('START TRANSACTION');

        try {
            // Delete all related records
            $tables = ['hp_individuals', 'hp_families', 'hp_events'];
            foreach ($tables as $table) {
                $wpdb->delete($wpdb->prefix . $table, ['tree_id' => $id]);
            }

            // Delete the tree
            $wpdb->delete($wpdb->prefix . 'hp_trees', ['id' => $id]);

            $wpdb->query('COMMIT');
            return true;

        } catch (\Exception $e) {
            $wpdb->query('ROLLBACK');
            return false;
        }
    }
    
    /**
     * Get the WordPress database object
     *
     * @return object WordPress database object
     */
    public function get_wpdb()
    {
        global $wpdb;
        return $wpdb;
    }
}
